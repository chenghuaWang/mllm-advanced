import os
import re
import sys
import time
from pathlib import Path
from typing import List

OPENCL_KERNEL_TEMPLATE_PATH: str = Path("KernelTemplate.inl")
OPENCL_KERNEL_FILE_LIST: List[str] = [
    "elewise_add_fp16_buffer.cl",
    "elewise_add_fp16_image.cl",
]


def gen_opencl_kernel_name(opencl_file_name: str) -> str:
    opencl_file_name = opencl_file_name.split(".")[0]
    opencl_file_name = opencl_file_name.split("_")
    ret_name = ""
    for i in range(len(opencl_file_name)):
        ret_name += opencl_file_name[i].capitalize()
    return ret_name


def gen_opencl_kernel_cpp_warp() -> None:
    def parse_opencl_flags(opencl_code: str) -> str:
        """
        The code in opencl is like:
        // </FLAGS START>
        //
        // MLLM_OPENCL_SUPPORT_FP16:def
        // SOME_FLAG_NAME_A:literal
        //
        // </FLAGS END>
        we will gen cpp code for setting those flags like this:
        void defineMllmOpenCLSupportFp16() { build_options_.emplace_back("-DMLLM_OPENCL_SUPPORT_FP16"); }
        void setSomeFlagNameA(const std::string& literal) { build_options_.emplace_back("-DSOME_FLAG_NAME_A=" + literal); }
        """

        def to_camel_case(flag_name: str) -> str:
            parts = flag_name.split("_")
            camel = "".join(part.capitalize() for part in parts)
            return camel

        flags_pattern = re.compile(
            r"// </FLAGS START>\s*(.*?)\s*// </FLAGS END>", re.DOTALL
        )
        match = flags_pattern.search(opencl_code)
        if not match:
            return ""

        flags_content = match.group(1)
        functions = []

        for line in flags_content.splitlines():
            line = line.strip()
            if line.startswith("//"):
                line = line[2:].strip()
            else:
                continue

            if not line:
                continue

            if ":" not in line:
                continue
            flag_name, param_spec = line.split(":", 1)
            flag_name = flag_name.strip()
            param_spec = param_spec.strip()

            camel_name = to_camel_case(flag_name)

            if param_spec == "def":
                func = f'void define{camel_name}() {{ build_options_.emplace_back("-D{flag_name}"); }}'
                functions.append(func)
            else:
                func = f'void set{camel_name}(const std::string& {param_spec}) {{ build_options_.emplace_back("-D{flag_name}=" + {param_spec}); }}'
                functions.append(func)

        return "\n".join(functions)

    for opencl_file_name in OPENCL_KERNEL_FILE_LIST:
        code = open(
            os.path.join("mllm/Backends/OpenCL/Kernels/", OPENCL_KERNEL_TEMPLATE_PATH),
            "r",
        ).read()
        opencl_code = open(
            os.path.join("mllm/Backends/OpenCL/Kernels/", opencl_file_name)
        ).read()
        code_flags = parse_opencl_flags(opencl_code)
        code = code.replace(
            "<&opencl_kernel_name&>", gen_opencl_kernel_name(opencl_file_name)
        )
        code = code.replace("<&opencl_kernel_cfg_funcs&>", code_flags)
        code = code.replace("<&opencl_file&>", opencl_file_name)
        code = code.replace(
            "<&generate_date&>", time.strftime("%a %b %d %H:%M:%S %Y", time.localtime())
        )
        escaped_lines = []
        for line in opencl_code.split("\n"):
            escaped_line = line.replace("\\", "\\\\").replace('"', '\\"')
            escaped_lines.append(f'"{escaped_line}\\n"')
        code_content = "\n".join(escaped_lines)
        code = code.replace("<&opencl_kernel_source&>", code_content)
        with open(
            os.path.join(
                "mllm/Backends/OpenCL/Kernels/",
                gen_opencl_kernel_name(opencl_file_name) + ".hpp",
            ),
            "w",
        ) as f:
            f.write(code)


def gen_opencl_kernel_cpp_warp_core() -> None:
    def core_template() -> str:
        return f"""// This file is generated by gen_opencl_kernel_cpp_warp.py
// data     :{time.strftime("%a %b %d %H:%M:%S %Y", time.localtime())}
//
// DO NOT MODIFY THIS FILE.
#pragma once

<&include_opencl_files&>
"""

    code = core_template()
    kernel_list = [gen_opencl_kernel_name(item) for item in OPENCL_KERNEL_FILE_LIST]
    include_opencl_files = "\n".join(
        [f'#include "mllm/Backends/OpenCL/Kernels/{item}.hpp"' for item in kernel_list]
    )
    code = code.replace("<&include_opencl_files&>", include_opencl_files)
    with open("mllm/Backends/OpenCL/Kernels/Core.inl", "w") as f:
        f.write(code)


if __name__ == "__main__":
    gen_opencl_kernel_cpp_warp()
    gen_opencl_kernel_cpp_warp_core()
